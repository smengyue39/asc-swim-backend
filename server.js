
import express from 'express'; import bodyParser from 'body-parser'; import cors from 'cors'; import fs from 'fs-extra'; import path from 'path'; import nodemailer from 'nodemailer';
import cookieParser from 'cookie-parser'; import session from 'express-session'; import bcrypt from 'bcryptjs'; import speakeasy from 'speakeasy'; import helmet from 'helmet'; import rateLimit from 'express-rate-limit'; import ExcelJS from 'exceljs'; import { fileURLToPath } from 'url';
const __filename=fileURLToPath(import.meta.url); const __dirname=path.dirname(__filename);
const app=express(); app.use(helmet()); app.use(bodyParser.json()); app.use(cookieParser()); app.set('trust proxy',1); app.use(session({secret:'asc_session_secret_change_me',resave:false,saveUninitialized:false,cookie:{httpOnly:true,sameSite:'lax'}}));
app.use(cors({origin:false}));
const FRONTEND_DIR=path.join(__dirname,'../frontend'); const ADMIN_DIR=path.join(FRONTEND_DIR,'admin'); const DB_PATH=path.join(__dirname,'db.json'); const CFG_PATH=path.join(__dirname,'config.json'); const SLOTS_TEMPLATE=path.join(__dirname,'slots_template.json'); const SLOTS_STATE=path.join(__dirname,'slots_state.json');
const now=()=>new Date().toISOString(); const today=()=>{const d=new Date(); d.setHours(0,0,0,0); return d;}; async function readDB(){return fs.readJson(DB_PATH);} async function writeDB(d){return fs.writeJson(DB_PATH,d,{spaces:2});} async function readCfg(){return fs.readJson(CFG_PATH);} async function readTemplate(){return fs.readJson(SLOTS_TEMPLATE);} async function readState(){return fs.readJson(SLOTS_STATE);} async function writeState(s){return fs.writeJson(SLOTS_STATE,s,{spaces:2});}
function termKey(term, phone){return `${term.id}:${phone}`;} function withinTerm(dateStr, term){ const d=new Date(dateStr); return d>=new Date(term.start) && d<=new Date(term.end);} function ensureFuture(dateStr){ const d=new Date(dateStr); return d>=today(); }
function addAudit(db, action, payload){ db.audit.push({ts: now(), action, payload}); }
async function ensureSlots(){ const cfg=await readCfg(); let state=await readState(); if(!state.termId || state.termId!==cfg.term.id){ const tpl=await readTemplate(); state={termId:cfg.term.id,map:{}}; const start=new Date(cfg.term.start), end=new Date(cfg.term.end); for(let d=new Date(start); d<=end; d.setDate(d.getDate()+1)){ const dow=d.getDay(); const key=d.toISOString().slice(0,10); const arr=dow===6?tpl.sat:(dow===0?tpl.sun:[]); if(arr.length){ state.map[key]=arr.map(x=>({date:key,time:x.time,coach:x.coach,capacity:x.capacity,remaining:x.capacity})); } } await writeState(state);} return state; }
const apiLimiter=rateLimit({windowMs:60*1000,max:60}); const loginLimiter=rateLimit({windowMs:5*60*1000,max:20}); app.use('/api/',apiLimiter); app.use('/api/login',loginLimiter);
app.use('/', express.static(FRONTEND_DIR)); app.use('/admin', async (req,res,next)=>{ if(req.path==='/login.html'||req.path==='/login') return next(); if(req.session&&req.session.user){ return express.static(ADMIN_DIR)(req,res,next);} res.redirect('/admin/login.html'); });
app.post('/api/login', async (req,res)=>{ const {username,password,token}=req.body; const cfg=await readCfg(); const u=(cfg.admin.users||[]).find(x=>x.username===username); if(!u) return res.status(401).send('用户不存在'); if(!bcrypt.compareSync(password,u.passwordHash)) return res.status(401).send('密码错误'); if(u.totpEnabled){ const ok=speakeasy.totp.verify({secret:u.totpSecret,encoding:'base32',token}); if(!ok) return res.status(401).send('动态码错误'); } req.session.user={username}; res.json({ok:true}); });
app.post('/api/logout',(req,res)=>{ req.session.destroy(()=>res.json({ok:true})); }); app.get('/api/me',(req,res)=>{ res.json({auth: !!(req.session&&req.session.user)}); });
function requireAuth(req,res,next){ if(req.session&&req.session.user) return next(); res.status(401).send('未登录'); }
app.get('/api/config', async (req,res)=>{ res.json(await readCfg()); });
app.get('/api/term_dates', async (req,res)=>{ const dow=req.query.dow; if(!dow) return res.status(400).send('缺少参数 dow'); const cfg=await readCfg(); const out=[]; for(let d=new Date(cfg.term.start); d<=new Date(cfg.term.end); d.setDate(d.getDate()+1)){ if((dow==='sat'&&d.getDay()===6)||(dow==='sun'&&d.getDay()===0)) out.push(d.toISOString().slice(0,10)); } res.json({dates:out}); });
app.get('/api/term_dates_all', async (req,res)=>{ const cfg=await readCfg(); const out=[]; for(let d=new Date(cfg.term.start); d<=new Date(cfg.term.end); d.setDate(d.getDate()+1)) out.push(d.toISOString().slice(0,10)); res.json({dates:out}); });
app.get('/api/slots', async (req,res)=>{ const date=req.query.date; await ensureSlots(); const state=await readState(); if(date) return res.json(state.map[date]||[]); res.json([]); });
app.post('/api/price_preview', async (req,res)=>{ const {weekday,startDate,midJoin,coupon}=req.body; const cfg=await readCfg(); if(!weekday||!startDate) return res.status(400).send('缺少字段'); const start=new Date(cfg.term.start), end=new Date(cfg.term.end); const join=midJoin?new Date(Math.max(new Date(midJoin), new Date(startDate))):new Date(startDate); let count=0; for(let d=new Date(join); d<=end; d.setDate(d.getDate()+1)){ if((weekday==='sat'&&d.getDay()===6)||(weekday==='sun'&&d.getDay()===0)) count++; } const per=weekday==='sat'?cfg.price.sat:cfg.price.sun; let total=count*per; if(coupon&&cfg.coupons[coupon]){ const c=cfg.coupons[coupon]; total=c.type==='percent'?Math.round(total*(100-c.value))/100:Math.max(0,total-c.value);} res.json({total}); });
function ensureNotPast(dateStr){ if(!(new Date(dateStr)>=today())) throw new Error('不能选择过去的日期'); }
function ensure24h(dateStr){ const d=new Date(dateStr); const cutoff=new Date(Date.now()+24*60*60*1000); const dd=new Date(d.getFullYear(),d.getMonth(),d.getDate()); const cc=new Date(cutoff.getFullYear(),cutoff.getMonth(),cutoff.getDate()); if(dd<cc) throw new Error('需至少提前 24 小时'); }
async function sendEmailIfEnabled(to,subject,html){ const cfg=await readCfg(); try{ if(!cfg.notify.email.enabled) return {sent:false,reason:'disabled'}; const t=nodemailer.createTransport({host:cfg.notify.email.host,port:cfg.notify.email.port,secure:cfg.notify.email.secure,auth:{user:cfg.notify.email.user,pass:cfg.notify.email.pass}}); await t.sendMail({from:cfg.notify.email.from,to,subject,html}); return {sent:true}; }catch(e){ return {sent:false,reason:e.message}; } }
function caslToken(email, secret){ return Buffer.from(require('crypto').createHash('sha256').update(email+secret).digest('hex')).toString('hex').slice(0,32); }
app.post('/api/register', async (req,res)=>{ const {studentName,age,phone,email,weekday,startDate,midJoin,level,casl,coupon}=req.body; const cfg=await readCfg(); if(cfg.casl.required && !casl) return res.status(400).send('需要 CASL 同意以接收通知'); if(!studentName||!age||!phone||!email||!weekday||!startDate||!level) return res.status(400).send('缺少字段'); const d=new Date(startDate); if(weekday==='sat'&&d.getDay()!==6) return res.status(400).send('开始日期需为周六'); if(weekday==='sun'&&d.getDay()!==0) return res.status(400).send('开始日期需为周日'); if(!withinTerm(startDate, cfg.term)) return res.status(400).send('开始日期不在学期内'); const db=await readDB(); const rec={id:cryptoRandom(),createdAt:now(),term:cfg.term.id,studentName,age,phone,email,weekday,startDate,midJoin:midJoin||null,level,casl:!!casl,coupon:coupon||null}; db.registrations.push(rec); addAudit(db,'register',{id:rec.id,phone}); await writeDB(db); const unsub='https://example.com/unsubscribe?token='+caslToken(email, cfg.casl.secret); await sendEmailIfEnabled(email,'报名成功 | Adventure Swimming Club',`<p>您好，${studentName} 已成功报名。</p><p>开课日：${startDate}（${weekday==='sat'?'周六':'周日'}）</p><p><a href="${unsub}">退订通知</a></p>`); res.json({ok:true,message:'报名成功（通知将发送）',id:rec.id}); });
app.post('/api/trial', async (req,res)=>{ const {studentName,age,phone,email,weekday,startDate,level,casl}=req.body; const cfg=await readCfg(); if(cfg.casl.required && !casl) return res.status(400).send('需要 CASL 同意以接收通知'); if(!studentName||!age||!phone||!email||!weekday||!startDate||!level) return res.status(400).send('缺少字段'); if(!withinTerm(startDate,cfg.term)) return res.status(400).send('日期不在学期内'); const db=await readDB(); const rec={id:cryptoRandom(),createdAt:now(),term:cfg.term.id,studentName,age,phone,email,weekday,startDate,level,casl:!!casl}; db.trials.push(rec); addAudit(db,'trial',{id:rec.id,phone}); await writeDB(db); res.json({ok:true,message:'试课已提交'}); });
app.post('/api/leave', async (req,res)=>{ const {studentName,phone,weekday,leaveDate,origSlot,reason,casl}=req.body; if(!studentName||!phone||!weekday||!leaveDate||!origSlot||!reason) return res.status(400).send('缺少字段'); const cfg=await readCfg(); if(!withinTerm(leaveDate,cfg.term)) return res.status(400).send('请假日期不在学期内'); try{ ensureNotPast(leaveDate); ensure24h(leaveDate);}catch(e){ return res.status(400).send(e.message); } const db=await readDB(); const key=termKey(cfg.term,phone); const count=db.leaves.filter(x=>termKey(cfg.term,x.phone)===key).length; if(count>=1) return res.status(400).send('本学期请假次数已用完'); const rec={id:cryptoRandom(),createdAt:now(),term:cfg.term.id,studentName,phone,weekday,leaveDate,origSlot,reason,casl:!!casl}; db.leaves.push(rec); addAudit(db,'leave',{id:rec.id,phone}); await writeDB(db); res.json({ok:true,message:'请假已确认'}); });
app.post('/api/makeup', async (req,res)=>{ const {studentName,phone,missDate,targetDate,targetSlot,casl}=req.body; if(!studentName||!phone||!missDate||!targetDate||!targetSlot) return res.status(400).send('缺少字段'); const cfg=await readCfg(); if(!withinTerm(targetDate,cfg.term)) return res.status(400).send('补课日期不在学期内'); try{ ensureNotPast(targetDate);}catch(e){ return res.status(400).send(e.message);} const db=await readDB(); const key=termKey(cfg.term,phone); const count=db.makeups.filter(x=>termKey(cfg.term,x.phone)===key).length; if(count>=1) return res.status(400).send('本学期补课次数已用完'); await ensureSlots(); const state=await readState(); const [date,time,coach]=targetSlot.split('|'); const list=state.map[date]||[]; const found=list.find(s=>s.time===time&&s.coach===coach); if(!found) return res.status(400).send('时段不存在'); if(found.remaining<=0) return res.status(400).send('该时段已满'); found.remaining-=1; await writeState(state); const rec={id:cryptoRandom(),createdAt:now(),term:cfg.term.id,studentName,phone,missDate,targetDate,targetSlot,casl:!!casl}; db.makeups.push(rec); addAudit(db,'makeup',{id:rec.id,phone,date,time,coach}); await writeDB(db); res.json({ok:true,message:'补课已确认'}); });
app.get('/api/export', requireAuth, async (req,res)=>{ const type=req.query.type; const db=await readDB(); const map={registrations:db.registrations,leaves:db.leaves,makeups:db.makeups,trials:db.trials}; const arr=map[type]||[]; const fields=arr.length?Object.keys(arr[0]):[]; let csv=fields.join(',')+'\n'; arr.forEach(row=>{ csv+=fields.map(k=>JSON.stringify(row[k]??'')).join(',')+'\n'; }); res.setHeader('Content-Type','text/csv; charset=utf-8'); res.setHeader('Content-Disposition',`attachment; filename="${type}.csv"`); res.send(csv); });
app.get('/api/export_xlsx', requireAuth, async (req,res)=>{ const db=await readDB(); const wb=new ExcelJS.Workbook(); const sheets={registrations:db.registrations,leaves:db.leaves,makeups:db.makeups,trials:db.trials,audit:db.audit}; for(const [name,rows] of Object.entries(sheets)){ const ws=wb.addWorksheet(name); if(rows.length){ ws.columns=Object.keys(rows[0]).map(k=>({header:k,key:k})); rows.forEach(r=>ws.addRow(r)); } } res.setHeader('Content-Type','application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'); res.setHeader('Content-Disposition','attachment; filename="asc_export.xlsx"'); await wb.xlsx.write(res); res.end(); });
app.get('/api/stats', requireAuth, async (req,res)=>{ const cfg=await readCfg(); const db=await readDB(); await ensureSlots(); const state=await readState(); const remainingThisWeek=Object.entries(state.map).reduce((acc,[date,slots])=>{ const d=new Date(date), nowd=new Date(); const sameWeek=JSON.stringify(getWeekNumber(d))===JSON.stringify(getWeekNumber(nowd)); return acc+(sameWeek?slots.reduce((a,b)=>a+(b.remaining||0),0):0); },0); const regs=db.registrations.length; const expectedWeek=regs*1; const expectedMonth=regs*4; const leavesWeek=db.leaves.filter(x=>isSameWeek(x.leaveDate,new Date())).length; const leavesMonth=db.leaves.filter(x=>isSameMonth(x.leaveDate,new Date())).length; const attW=clampPct(1-(expectedWeek?(leavesWeek/expectedWeek):0)); const attM=clampPct(1-(expectedMonth?(leavesMonth/expectedMonth):0)); res.json({termId:cfg.term.id,termStart:cfg.term.start,termEnd:cfg.term.end,registrations:regs,leaves:db.leaves.length,makeups:db.makeups.length,remainingThisWeek,attendanceWeek:attW,attendanceMonth:attM}); });
function clampPct(x){ const p=Math.max(0,Math.min(1,x)); return Math.round(p*100); } function getWeekNumber(d){ d=new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate())); const dayNum=d.getUTCDay()||7; d.setUTCDate(d.getUTCDate()+4-dayNum); const yearStart=new Date(Date.UTC(d.getUTCFullYear(),0,1)); const weekNo=Math.ceil((((d - yearStart) / 86400000) + 1)/7); return [d.getUTCFullYear(), weekNo]; } function isSameWeek(s, ref){ const d=new Date(s); return JSON.stringify(getWeekNumber(d))===JSON.stringify(getWeekNumber(ref)); } function isSameMonth(s, ref){ const d=new Date(s); return d.getFullYear()===ref.getFullYear() && d.getMonth()===ref.getMonth(); }
function cryptoRandom(){ return (Date.now().toString(36)+Math.random().toString(36).slice(2,10)).toUpperCase(); }
const PORT=process.env.PORT||8080; app.listen(PORT,()=>console.log('ASC v1.1 on http://localhost:'+PORT));
